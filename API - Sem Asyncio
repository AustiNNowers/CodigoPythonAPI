import requests
import pandas as pd
import os
from datetime import datetime
import asyncio
import aiohttp
import time

base_url = "https://prologapp.com/prolog/api/v3/"
end_url = {
            #"checklists" : "checklists?",
            #"checklists-work_orders" : "checklists/work-orders?",
            #"vehicles" : "vehicles?",
            #"vehicles-types" : "vehicles/types/paginated?",
            #"vehicles-models" : "vehicles/models/paginated?",
            #"vehicles-makes" : "vehicles/makes/paginated?",
            "work_orders" : "work-orders?",
            #"users" : "users?"
           }    

token = "qgIfQKWHMoeyQ3sLYGQrr2qV0fx66KgWnIS2FqhfhiuAJ7aZj7d"

headers = {
"x-prolog-api-token" : token,
"Content-Type" : "application/json"
}

unidades = {988: "Trasporte", 2083: "Florestal"}
#pasta_destino = r"C:\Users\LUIS.BRANCO\OneDrive - Vale do Tibagi\OneDrive - Prolog"
pasta_destino = "C:\\Users\\LUIS.BRANCO\\Prolog\\dados_diarios"
os.makedirs(pasta_destino, exist_ok=True)

startDate = "2024-12-01"
endDate = datetime.now().date().strftime("%Y-%m-%d")

def gerenciar_funcoes():
    print("Gerenciando funções...")

    for nome, endpoint in end_url.items():
        planilha = []
        
        for unidade_id, nome_unidade in unidades.items():
            dados = buscar_dados(endpoint, unidade_id)
            planilha.append(dados)
        
        if planilha:
            salvar_dados(planilha, nome, endpoint)
        else:
            print(f"Nenhum dado encontrado para {nome}")


def buscar_dados(endpoint, unidade_id):
    pageNumberBackup = 0
    pageNumber = 0
    chamados = 0
    todos_dados = []

    print("Entrando no loop...")
    while True:

        params = {}

        if pageNumberBackup != 0:
            pageNumber = pageNumberBackup
            pageNumberBackup = 0

        if endpoint == "checklists?":
            params = {
                "branchOfficesId" : unidade_id,
                "startDate" : startDate,
                "endDate" : endDate,
                "includeAnswers" : 1,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        elif endpoint == "checklists/work-orders?":
            params = {
                "branchOfficesId" : unidade_id,
                "startDate" : startDate,
                "endDate" : endDate,
                "includeAnswers" : 1,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        elif endpoint == "work-orders?":
            params = {
                "branchOfficesId" : unidade_id,
                "includeItems" : True,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        elif endpoint == "vehicles?":
            params = {
                "branchOfficesId" : unidade_id,
                "includeInactive" : 1,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        elif endpoint == "vehicles/types/paginated?":
            params = {
                "companyId" : 247,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        elif endpoint == "vehicles/models/paginated?":
            params = {
                "companyId" : 247,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        elif endpoint == "vehicles/makes/paginated?":
            params = {
                "companyId" : 247,
                "pageSize" : 100,
                "pageNumber" : pageNumber,
                "includeInactive" : 1,
                "includeInactiveModels" : 1
            }
        elif endpoint == "users?":
            params = {
                "branchOfficesId" : unidade_id,
                "pageSize" : 100,
                "pageNumber" : pageNumber
            }
        print("escolheu os params: ", endpoint)

        try:
            print("Fazendo a requisição: ", chamados)
            resposta = requests.get(base_url + endpoint, headers=headers, params=params)

            if resposta.status_code == 200:
                dados = resposta.json()
                print("Dados recebidos com sucesso!")
            elif resposta.status_code == 502:
                print("Erro 502: Bad Gateway. Tentando novamente...")
                time.sleep(5)
                pageNumberBackup = pageNumber
                continue
            else:
                print(f"Erro {resposta.status_code}: {resposta.text}")
                break
            
            todos_dados.extend(dados.get("content"))

            if dados.get("lastPage", True):
                print(f"Chegou na ultima pagina: {pageNumber}")
                break

            print("Pagina atual: ", pageNumber)
            pageNumber += 1
            chamados += 1
            print("Próxima página: ", pageNumber)

        except requests.exceptions.RequestException as e:
            print(f"Erro de conexão com a API: {e}")
            break
    
    print("Retornando os dados coletados da unidade: ", unidade_id)
    return pd.DataFrame(todos_dados) if todos_dados else pd.DataFrame()

def salvar_dados(planilha, nome, endpoint):
    print("Indo criar/salvar as planilhas...")

    df_final = pd.concat(planilha, ignore_index=True)
    nome_arquivo = os.path.join(pasta_destino, f"dados_{nome}.xlsx")

    if endpoint == "checklists/work-orders?":
        df_final = df_final.explode("workOrderItems")
    elif endpoint == "vehicles?":
        df_final = pd.json_normalize(df_final.to_dict(orient="records"))
        df_final = df_final.explode("coupling.coupledVehicles")
    elif endpoint == "vehicles/makes/paginated?":
        df_final = df_final.explode("models")
    elif endpoint == "work-orders?":
        df_final = pd.json_normalize(df_final.to_dict(orient="records"))
        df_final = df_final.explode("workOrderItems")
        df_final = pd.json_normalize(df_final.to_dict(orient="records"))
        df_final = df_final.explode("workOrderItems.itemServices")
        df_final = df_final.explode("workOrderItems.itemProducts")
        df_final = df_final.explode("workOrderItems.openingAttachments")
        df_final = df_final.explode("workOrderItems.resolutionAttachments")
        df_final = pd.json_normalize(df_final.to_dict(orient="records"))

    df_final.to_excel(nome_arquivo, index=False, engine="openpyxl")
    print(f"Planilha {nome} salva com sucesso!")

if __name__ == "__main__":
    gerenciar_funcoes()
    print("Processo concluído!")
